// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TechArtProfileProject.Lib.Infrastructure;

namespace TechArtProfileProject.Lib.Infrastructure.Migrations
{
    [DbContext(typeof(UserProfileDbContext))]
    partial class UserProfileDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.6");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TechArtProfileProject.Lib.Model.Models.Contact", b =>
                {
                    b.Property<int>("SenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SenderEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderMessage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeSent")
                        .HasColumnType("TEXT");

                    b.HasKey("SenderId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("TechArtProfileProject.Lib.Model.Models.Education", b =>
                {
                    b.Property<int>("EducationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DegreeObtained")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discipline")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("GraduationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserProfileId")
                        .HasColumnType("TEXT");

                    b.HasKey("EducationId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Educations");

                    b.HasData(
                        new
                        {
                            EducationId = 1,
                            DegreeObtained = "HND",
                            Discipline = "Computer Engineering",
                            GraduationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SchoolName = "Lagos State Polytechnic",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            UserProfileId = "2438b126-7410-43dc-84f8-f5e6c5c71289"
                        },
                        new
                        {
                            EducationId = 2,
                            DegreeObtained = "OND",
                            Discipline = "Computer Engineering",
                            GraduationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SchoolName = "Lagos State Polytechnic",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            UserProfileId = "2438b126-7410-43dc-84f8-f5e6c5c71289"
                        });
                });

            modelBuilder.Entity("TechArtProfileProject.Lib.Model.Models.UserServices", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ServiceDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserProfileId")
                        .HasColumnType("TEXT");

                    b.HasKey("ServiceId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            ServiceId = 7,
                            ServiceDescription = "Build and manage responsive Design, install and test a website's user interface elements. Focus on a website's functionality and the look of a website. Develop ideas for a new website or come up with ways to renovate an existing website.",
                            ServiceName = "Web development",
                            UserId = 3,
                            UserProfileId = "9e0444fb-e663-4b8a-88eb-1c9e256a0f48"
                        },
                        new
                        {
                            ServiceId = 8,
                            ServiceDescription = "Create functional and aesthetically pleasing apps which meet the needs of customer. Create apps on iOS and Android devices and maintain.",
                            ServiceName = "Mobile development",
                            UserId = 3,
                            UserProfileId = "9e0444fb-e663-4b8a-88eb-1c9e256a0f48"
                        },
                        new
                        {
                            ServiceId = 9,
                            ServiceDescription = "Offers Project Management service using agile methodologies to startups and companies on freelance base and contract base.",
                            ServiceName = "Project Management",
                            UserId = 3,
                            UserProfileId = "9e0444fb-e663-4b8a-88eb-1c9e256a0f48"
                        });
                });

            modelBuilder.Entity("TechArtProfileProject.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProjectDescription")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProjectLink")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserProfileId")
                        .HasColumnType("TEXT");

                    b.HasKey("ProjectId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            ProjectId = 5,
                            ProjectDescription = "The application is a windows form application to carry out banking operations. The operations available for this project includes account opening, cash deposit, cash withdrawal, funds transfer between accounts and the application is capable of generating statement of accounts for every account.",
                            ProjectLink = "https://github.com/Aitem2012/BankAccountModel",
                            ProjectName = "Windows Forms Bank Application",
                            UserId = 3,
                            UserProfileId = "9e0444fb-e663-4b8a-88eb-1c9e256a0f48"
                        },
                        new
                        {
                            ProjectId = 6,
                            ProjectDescription = "Using the ASP.NET MVC. This project was used to build a simple portfolio to showcase my details and professional qualifications as well as my educational background. The Application is published on heroku but the link to the project file can be found in the link below.",
                            ProjectLink = "https://github.com/Aitem2012/Porfolio",
                            ProjectName = "Personal Portfolio Using ASP.NET MVC",
                            UserId = 3,
                            UserProfileId = "9e0444fb-e663-4b8a-88eb-1c9e256a0f48"
                        });
                });

            modelBuilder.Entity("TechArtProfileProject.Models.UserProfile", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("UserProfile");

                    b.HasData(
                        new
                        {
                            Id = "9e0444fb-e663-4b8a-88eb-1c9e256a0f48",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3ea252df-ca26-4a2b-8667-37b4ab66446e",
                            Email = "ajumokoibrahimtemitope@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a90c29f6-08e4-4c02-9eb9-c1d012cea225",
                            TwoFactorEnabled = false,
                            Biography = "Experienced C# developer with extensive DotNet experience looking to continue to develop my skill set on the back-end at a company driven to addressing the climate crisis. Information Technology Engineer with strong leadership and relationship-building skills. I have solid experience managing all levels of large-scale projects, including budgeting and administration. Highly ambitious Information Security Engineer with background in data processing, data management and Security. A network administrator enthusiast, including back-up, security management, e-mail systems and applications support. Experienced in project management",
                            FirstName = "Ibrahim",
                            Image = "images/aitem.jpg",
                            JobTitle = "Software Developer",
                            LastName = "Temitope",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TechArtProfileProject.Lib.Model.Models.Education", b =>
                {
                    b.HasOne("TechArtProfileProject.Models.UserProfile", "UserProfile")
                        .WithMany("Educations")
                        .HasForeignKey("UserProfileId");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("TechArtProfileProject.Lib.Model.Models.UserServices", b =>
                {
                    b.HasOne("TechArtProfileProject.Models.UserProfile", "UserProfile")
                        .WithMany("Services")
                        .HasForeignKey("UserProfileId");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("TechArtProfileProject.Models.Project", b =>
                {
                    b.HasOne("TechArtProfileProject.Models.UserProfile", "UserProfile")
                        .WithMany("Projects")
                        .HasForeignKey("UserProfileId");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("TechArtProfileProject.Models.UserProfile", b =>
                {
                    b.Navigation("Educations");

                    b.Navigation("Projects");

                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
